using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections;
using Rapid;
using Rapid.Windows;
using System.Data;
using System.Xml;
namespace Rapid.TabEntities
{
    /// <summary>
    /// Interaction logic for MyPartProgram.xaml
    /// </summary>
    public partial class MyPartProgram : Grid
    {
        public int SelectedProgIndex = -1;
        int rowcount;
        int tablecount;
        public MyPartProgram()
        {
            try
            {
                this.InitializeComponent();
                dgvPrograms.SelectionMode = DataGridSelectionMode.Extended;
                dgvPrograms.SelectionUnit = DataGridSelectionUnit.FullRow;
                dgvPrograms.AutoGeneratedColumns += new EventHandler(dgvPrograms_AutoGeneratedColumns);
                dgvPrograms.MouseMove += new MouseEventHandler(dgvPrograms_MouseMove);
                dgvPrograms.MouseLeave += new MouseEventHandler(dgvPrograms_MouseLeave);

                ContextMenu con = new System.Windows.Controls.ContextMenu();
                MenuItem delete = new MenuItem();
                delete.Header = "Delete";
                delete.Tag = "Delete";
                delete.Click += new RoutedEventHandler(HandlelstReports_RowDeleteClicked);
                con.Items.Add(delete);
                lstReports.ContextMenu = con;
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP01", ex); }
        }

        void dgvPrograms_AutoGeneratedColumns(object sender, EventArgs e)
        {
            try
            {
                SetColumnWidthProperly();
                dgvPrograms.UpdateLayout();
                if (dgvPrograms.Items.Count > 0)
                {
                    dgvPrograms.ScrollIntoView(dgvPrograms.Items[dgvPrograms.Items.Count - 1], dgvPrograms.Columns[0]);
                }
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP02", ex); }
        }
        public void SetColumnWidthProperly()
        {
            try
            {
                if (dgvPrograms.Columns.Count == 2)
                {
                    dgvPrograms.Columns[0].Width = new DataGridLength(0.8, DataGridLengthUnitType.Star);
                    dgvPrograms.Columns[1].Width = new DataGridLength(0.2, DataGridLengthUnitType.Star);
                }

                if (dgvTitles.Columns.Count == 2)
                {
                    dgvTitles.Columns[0].Width = new DataGridLength(0.5, DataGridLengthUnitType.Star);
                    dgvTitles.Columns[1].Width = new DataGridLength(0.5, DataGridLengthUnitType.Star);
                }
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP03", ex); }
        }

        private void btnNewReport_Click(object sender, System.Windows.RoutedEventArgs e)
        {
            try
            {
                if (lstReports.SelectedIndex >= 0)
                {
                    string Tmps = lstReports.SelectedItem.ToString();
                    if (Tmps.Length > 0)
                    {
                        this.txtNewReport.Text = Tmps.Substring(Tmps.LastIndexOf("\\") + 1, Tmps.LastIndexOf(".") - Tmps.LastIndexOf("\\") - 1);
                        Panel.SetZIndex(this.cnvNewReport, 10);
                        this.cnvNewReport.Visibility = System.Windows.Visibility.Visible;
                    }
                }
                else
                    return;
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP04", ex); }
        }
        private void btnOKCancel_Click(object sender, System.Windows.RoutedEventArgs e)
        {
            try
            {
                this.cnvNewReport.Visibility = System.Windows.Visibility.Hidden;
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP05", ex); }
        }

        private void HandlelstReports_RowDeleteClicked(object sender, RoutedEventArgs e)
        {
            try
            {
                if (lstReports.SelectedIndex >= 0 && lstReports.Items.Count > 1)
                {
                    int SelectedIndx = lstReports.SelectedIndex;
                    string Tmps = lstReports.SelectedItem.ToString();
                    GlobalSettings.MainExcelInstance.DeleteReport_Database(Tmps);
                    GlobalSettings.LoadExcelInstance.Reset_All();
                    lstReports.Items.RemoveAt(SelectedIndx);
                    File.Delete(Tmps);
                    if (SelectedIndx == lstReports.Items.Count)
                        lstReports.SelectedIndex = SelectedIndx - 1;
                    else
                        lstReports.SelectedIndex = SelectedIndx;
                }
                else
                    return;
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP05a", ex); }
        }

        private DataGridRow previousRow;
        PPreviewWin PPPreview;
        void dgvPrograms_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {
                DependencyObject dep = (DependencyObject)e.OriginalSource;
                // iteratively traverse the visual tree
                while ((dep != null) &&
                        !(dep is DataGridRow))
                {
                    dep = VisualTreeHelper.GetParent(dep);
                }
                if (dep == null)
                {
                    if (PPPreview != null)
                    {
                        previousRow = null;
                        PPPreview.CloseWin();
                        //System.Threading.Thread.Sleep(120);
                        PPPreview = null;
                    }
                    return;
                }

                if (dep is DataGridRow)
                {
                    DataGridRow row = dep as DataGridRow;
                    if (row.IsMouseOver && previousRow != row)
                    {
                        if (PPPreview != null)
                        {
                            PPPreview.CloseWin();
                            //System.Threading.Thread.Sleep(120);
                            PPPreview = null;
                        }
                        previousRow = row;

                        string FlPath = GlobalSettings.PartProgramPaths[row.GetIndex()];
                        string ProgName = ((System.Data.DataRowView)dgvPrograms.Items[row.GetIndex()]).Row[0].ToString();
                        string FlName = FlPath + ProgName.Substring(0, ProgName.LastIndexOf(".")) + "_ProgramPreviewImage.jpg";
                        if (File.Exists(FlName))
                        {
                            PPPreview = new PPreviewWin();
                            if (GlobalSettings.MainWin.OtherWinToolbarRotated)
                                PPPreview.Left = dgvPrograms.PointToScreen(new Point(0, 0)).X + dgvPrograms.ActualWidth + 10;
                            else
                                PPPreview.Left = dgvPrograms.PointToScreen(new Point(0, 0)).X - 390;
                            PPPreview.Top = e.GetPosition(GlobalSettings.MainWin).Y - 75;
                            PPPreview.ShowImageFile(FlName);
                            PPPreview.ShowWin();
                        }
                    }

                }
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP06", ex); }
        }
        void dgvPrograms_MouseLeave(object sender, MouseEventArgs e)
        {
            try
            {
                if (PPPreview != null)
                {
                    PPPreview.CloseWin();
                    //System.Threading.Thread.Sleep(120);
                    PPPreview = null;
                    previousRow = null;
                }
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP07", ex); }
        }

        //function to delete partprogram.........
        public bool RenamePartProgram()
        {
            try
            {
                if (dgvPrograms.SelectedItems.Count != 1)
                {
                    MessageBox.Show("Please select a single Program and then rename", "Rapid I");
                    return false;
                }
                //Show the shape rename window.
                ShapeRenameWin renameWin = new ShapeRenameWin();
                System.Data.DataRow dr = ((System.Data.DataRowView)dgvPrograms.SelectedItem).Row;
                if (GlobalSettings.PartProgramLoaded && CurrentLoadedProgLbl.Text == "Current: " + dr[0].ToString())
                {
                    MessageBox.Show("Cannot rename currently loaded program.", "Rapid I");
                    return false;
                }
                string ProgramOldName = GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + dr[0].ToString();
                string[] imageOldName = (GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + dr[0].ToString()).Split(new char[] { '.' });
                string[] tempstr = dr[0].ToString().Split(new char[] { '.' });
                renameWin.txtNewName.Text = tempstr[0];
                renameWin.ShowDialog();
                if (renameWin.Result)
                {
                    FileInfo info = new FileInfo(ProgramOldName);
                    string ProgramNewName = renameWin.txtNewName.Text;
                    if (ProgramNewName.Contains("."))
                    {
                        string[] fileName = ProgramNewName.Split(new char[] { '.' });
                        if (fileName[fileName.Length - 1] != "rppx")
                        {
                            ProgramNewName = ProgramNewName + ".rppx";
                        }
                    }
                    else
                    {
                        ProgramNewName = ProgramNewName + ".rppx";
                    }

                    if (System.IO.File.Exists(ProgramNewName))
                    {
                        MessageBox.Show("This program name is already exist So Please change Program name", "Rapid I");
                        return false;
                    }
                    if (GlobalSettings.MainExcelInstance.RenameProgram_Database(ProgramOldName, GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + ProgramNewName))
                    {
                        if (System.IO.File.Exists(imageOldName[0] + "_ProgramPreviewImage.jpg"))
                        {
                            try
                            {
                                System.IO.File.Move(imageOldName[0] + "_ProgramPreviewImage.jpg", GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + renameWin.txtNewName.Text + "_ProgramPreviewImage.jpg");
                            }
                            catch(Exception ex)
                            {
                                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP57", ex);
                            }
                        }
                        if (System.IO.File.Exists(imageOldName[0] + "_FirstPointActionImage.jpg"))
                        {
                            try
                            {
                                System.IO.File.Move(imageOldName[0] + "_FirstPointActionImage.jpg", GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + renameWin.txtNewName.Text + "_FirstPointActionImage.jpg");
                            }
                            catch(Exception ex)
                            {
                                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP58", ex);
                            }
                        }
                        System.IO.File.Move(ProgramOldName, GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + ProgramNewName);
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP08", ex);
                return false;
            }
        }

        //function to rename partprogram.........
        public int DeletePartProgram()
        {
            int ProgramsDeleted = 0;
            try
            {
                if (PPPreview != null)
                {
                    PPPreview.CloseWin();
                    System.Threading.Thread.Sleep(120);
                    PPPreview = null;
                }
                for (int i = 0; i < dgvPrograms.SelectedItems.Count; i++)
                {
                    //if (dgvPrograms.SelectedIndex >= 0)
                    //{
                    System.Data.DataRow dr = ((System.Data.DataRowView)dgvPrograms.SelectedItems[i]).Row;
                    if (GlobalSettings.PartProgramLoaded && CurrentLoadedProgLbl.Text == "Current: " + dr[0].ToString())
                    {
                        MessageBox.Show("Cannot delete currently loaded program.", "Rapid I");
                        if (i == dgvPrograms.SelectedItems.Count - 1)
                            return ProgramsDeleted;
                        else
                            continue;
                    }
                    string ProgramOldName = GlobalSettings.PartProgramPaths[dgvPrograms.Items.IndexOf(dgvPrograms.SelectedItems[i])] + dr[0].ToString();
                    System.Collections.ArrayList reportName = new System.Collections.ArrayList();
                    System.Collections.ArrayList templateName = new System.Collections.ArrayList();
                    //GetAllReportName(ref reportName, ref templateName);
                    //Get all the reportnames 
                    //System.Data.DataRow dr = ((System.Data.DataRowView)dgvPrograms.SelectedItem).Row;
                    System.Collections.ArrayList ReportStyles = GlobalSettings.LoadExcelInstance.GetAllreportStyles((int)dr["Program_Id"]);
//                                                                    GlobalSettings.PartProgramPaths[dgvPrograms.Items.IndexOf(dgvPrograms.SelectedItems[i])] + dr[0].ToString());
                    //lstReportStyles.Items.Clear();
                    for (int j = 0; j < ReportStyles.Count; j++)
                    {
                        templateName.Add(GlobalSettings.TemplatePath + "\\" + ReportStyles[j].ToString() + "_Template.xls");
                        System.Collections.ArrayList Reports = GlobalSettings.LoadExcelInstance.GetAllReportNames(ReportStyles[j].ToString());
                        //lstReports.Items.Clear();
                        for (int l = 0; l < Reports.Count; l++)
                            reportName.Add(Reports[l].ToString());
                    }


                    if (GlobalSettings.MainExcelInstance.DeleteProgram_Database(ProgramOldName))
                    {
                        for (int j = 0; j < reportName.Count; j++)
                        {
                            if (System.IO.File.Exists(reportName[j].ToString()))
                                System.IO.File.Delete(reportName[j].ToString());
                        }
                        for (int j = 0; j < templateName.Count; j++)
                        {
                            if (System.IO.File.Exists(templateName[j].ToString()))
                                System.IO.File.Delete(templateName[j].ToString());
                        }
                        if (System.IO.File.Exists(ProgramOldName))
                            System.IO.File.Delete(ProgramOldName);
                        string[] imageOldName = (GlobalSettings.PartProgramPaths[dgvPrograms.Items.IndexOf(dgvPrograms.SelectedItems[i])] + dr[0].ToString()).Split(new char[] { '.' });
                        if (System.IO.File.Exists(imageOldName[0] + "_ProgramPreviewImage.jpg"))
                        {
                            try
                            {
                                System.IO.File.Delete(imageOldName[0] + "_ProgramPreviewImage.jpg");
                            }
                            catch (Exception ex)
                            {
                                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP61", ex);
                            }
                        }
                        if (System.IO.File.Exists(imageOldName[0] + "_FirstPointActionImage.jpg"))
                        {
                            try
                            {
                                System.IO.File.Delete(imageOldName[0] + "_FirstPointActionImage.jpg");
                            }
                            catch (Exception ex)
                            {
                                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP62", ex);
                            }
                        }
                        GlobalSettings.LoadExcelInstance.Reset_All();
                    }
                    ProgramsDeleted++;
                }
                return ProgramsDeleted;
            }
            catch (Exception ex)
            {
                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP09", ex);
                return 0;
            }
        }

        ////function to Export partprogram.........
        public bool ExportPartProgram()
        {
            try
            {
                //if (dgvPrograms.SelectedItems.Count != 1)
                //{
                //    MessageBox.Show("Please select a single Program and then Export", "Rapid I");
                //    return false;
                //}
                //Show the shape rename window.               
                System.Data.DataRow dr;//= ((System.Data.DataRowView)dgvPrograms.SelectedItem).Row;
                string ProgramOldName; // = GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + dr[0].ToString();
                string[] imageOldName; // = (GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + dr[0].ToString()).Split(new char[] { '.' });
                string ExcelName = GlobalSettings.ReportPath;
                //string[] tempstr = dr[0].ToString().Split(new char[] { '.' });
                System.Windows.Forms.FolderBrowserDialog dlg = new System.Windows.Forms.FolderBrowserDialog();
                dlg.SelectedPath = "";
                dlg.ShowNewFolderButton = true;
                //System.Windows.Forms.DialogResult result = ;
                IntPtr mainWindowPtr = new System.Windows.Interop.WindowInteropHelper(GlobalSettings.MainWin).Handle; // 'this' means WPF Window
                
                string ProgramNewName;
                if (dlg.ShowDialog(new OldWindow(mainWindowPtr)) == System.Windows.Forms.DialogResult.OK) // ProgramNewName != "")
                {
                    ProgramNewName = dlg.SelectedPath;
                    for (int jj = 0; jj < dgvPrograms.SelectedItems.Count; jj++)
                    {
                        ProgramNewName = dlg.SelectedPath;
                        dr = ((System.Data.DataRowView)dgvPrograms.SelectedItems[jj]).Row;
                        ProgramOldName = GlobalSettings.PartProgramPaths[dgvPrograms.Items.IndexOf(dgvPrograms.SelectedItems[jj])] + dr[0].ToString();
                        imageOldName = (GlobalSettings.PartProgramPaths[dgvPrograms.Items.IndexOf(dgvPrograms.SelectedItems[jj])] + dr[0].ToString()).Split(new char[] { '.' });
                        ProgramNewName += ProgramOldName.Substring(ProgramOldName.LastIndexOf(@"\"), (ProgramOldName.LastIndexOf(@".") - ProgramOldName.LastIndexOf(@"\")));
                        System.IO.Directory.CreateDirectory(ProgramNewName);
                        ProgramNewName += ProgramOldName.Substring(ProgramOldName.LastIndexOf(@"\"));
                        FileInfo info = new FileInfo(ProgramOldName);
                        if (ProgramNewName.Contains("."))
                        {
                            string[] fileName = ProgramNewName.Split(new char[] { '.' });
                            if (fileName[fileName.Length - 1] != "rppx")
                            {
                                ProgramNewName = ProgramNewName + ".rppx";
                            }
                        }
                        else
                        {
                            ProgramNewName = ProgramNewName + ".rppx";
                        }

                        if (System.IO.File.Exists(ProgramNewName))
                        {
                            MessageBox.Show("This program name already exist So Please change Program name", "Rapid I");
                            return false;
                        }

                        System.Collections.ArrayList reportName = new System.Collections.ArrayList();
                        System.Collections.ArrayList templateName = new System.Collections.ArrayList();
                        //GetAllReportName(ref reportName, ref templateName);
                        System.Collections.ArrayList ReportStyles = GlobalSettings.LoadExcelInstance.GetAllreportStyles((int)dr["Program_Id"]); // ProgramOldName); // GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + dr[0].ToString());
                        //lstReportStyles.Items.Clear();
                        for (int j = 0; j < ReportStyles.Count; j++)
                        {
                            templateName.Add(GlobalSettings.TemplatePath + "\\" + ReportStyles[j].ToString() + "_Template.xls");
                            System.Collections.ArrayList Reports = GlobalSettings.LoadExcelInstance.GetAllReportNames(ReportStyles[j].ToString());
                            //lstReports.Items.Clear();
                            for (int l = 0; l < Reports.Count; l++)
                                reportName.Add(Reports[l].ToString());
                        }
                        string Reportpath = "";
                        string Templatepath = "";
                        for (int j = 0; j < reportName.Count; j++)
                        {
                            if (System.IO.File.Exists(reportName[j].ToString()))
                            {
                                Reportpath = ProgramNewName.Substring(0, ProgramNewName.LastIndexOf(@"\")) + @"\" + reportName[j].ToString().Substring(reportName[j].ToString().LastIndexOf(@"\") + 1);
                                System.IO.File.Copy(reportName[j].ToString(), Reportpath);
                            }
                        }
                        for (int j = 0; j < templateName.Count; j++)
                        {
                            if (System.IO.File.Exists(templateName[j].ToString()))
                            {
                                Templatepath = ProgramNewName.Substring(0, ProgramNewName.LastIndexOf(@"\")) + @"\" + templateName[j].ToString().Substring(templateName[j].ToString().LastIndexOf(@"\") + 1);
                                System.IO.File.Copy(templateName[j].ToString(), Templatepath);
                            }
                        }
                        if (System.IO.File.Exists(imageOldName[0] + "_ProgramPreviewImage.jpg"))
                        {
                            System.IO.File.Copy(imageOldName[0] + "_ProgramPreviewImage.jpg", ProgramNewName.Substring(0, ProgramNewName.LastIndexOf(".")) + "_ProgramPreviewImage.jpg");
                        }
                        if (System.IO.File.Exists(imageOldName[0] + "_FirstPointActionImage.jpg"))
                        {
                            System.IO.File.Copy(imageOldName[0] + "_FirstPointActionImage.jpg", ProgramNewName.Substring(0, ProgramNewName.LastIndexOf(".")) + "_FirstPointActionImage.jpg");
                        }
                        System.IO.File.Copy(ProgramOldName, ProgramNewName);
                        try
                        {
                            XmlDocument doc = new XmlDocument();
                            string xmlfilename = ProgramNewName.Substring(0, ProgramNewName.LastIndexOf(".")) + ".xml";
                            string XmlRootName = "Partprogram";
                            XmlNode root = doc.CreateElement(XmlRootName);
                            XmlAttribute ReportPath = root.OwnerDocument.CreateAttribute("ReportPath");
                            ReportPath.Value = Reportpath;
                            XmlAttribute TemplatePath = root.OwnerDocument.CreateAttribute("TemplatePath");
                            TemplatePath.Value = Templatepath;
                            root.Attributes.Append(ReportPath);
                            root.Attributes.Append(TemplatePath);
                            doc.AppendChild(root);
                            XmlNode version = doc.CreateXmlDeclaration("1.0", "utf-8", "yes");
                            doc.InsertBefore(version, root);
                            DataSet ds = new DataSet();
                            DataSet ds1 = new DataSet();
                            ds1 = GlobalSettings.LoadExcelInstance.GetDataSet();
                            DataTable ProgramInformation = new DataTable();
                            DataTable ReportStyleInformation = new DataTable();
                            DataTable ReportInformation = new DataTable();
                            DataTable FieldInformation = new DataTable();
                            DataTable MultiProgramReport = new DataTable();
                            ProgramInformation = ds1.Tables["ProgramInformation"].Clone();
                            ReportStyleInformation = ds1.Tables["ReportStyleInformation"].Clone();
                            ReportInformation = ds1.Tables["ReportInformation"].Clone();
                            FieldInformation = ds1.Tables["FieldInformation"].Clone();
                            MultiProgramReport = ds1.Tables["MultiProgramReport"].Clone();
                            DataRow[] drow;
                            drow = ds1.Tables["ProgramInformation"].Select("Program_Name = '" + ProgramOldName + "'");
                            readRows(drow, ref ProgramInformation);
                            for (int i = 0; i < ProgramInformation.Rows.Count; i++)
                                readRows(ds1.Tables["ReportStyleInformation"].Select("Program_Id = '" + ProgramInformation.Rows[i]["Program_Id"] + "'"), ref ReportStyleInformation);
                            for (int i = 0; i < ReportStyleInformation.Rows.Count; i++)
                                readRows(ds1.Tables["ReportInformation"].Select("Report_Style_Id = '" + ReportStyleInformation.Rows[i]["Report_Style_Id"] + "'"), ref ReportInformation);
                            for (int i = 0; i < ReportStyleInformation.Rows.Count; i++)
                                readRows(ds1.Tables["FieldInformation"].Select("Report_Style_Id = '" + ReportStyleInformation.Rows[i]["Report_Style_Id"] + "'"), ref FieldInformation);
                            for (int i = 0; i < ProgramInformation.Rows.Count; i++)
                                readRows(ds1.Tables["MultiProgramReport"].Select("Program_Id = '" + ProgramInformation.Rows[i]["Program_Id"] + "'"), ref MultiProgramReport);
                            ds.Tables.Add(ProgramInformation);
                            ds.Tables.Add(ReportStyleInformation);
                            ds.Tables.Add(ReportInformation);
                            ds.Tables.Add(FieldInformation);
                            ds.Tables.Add(MultiProgramReport);
                            for (int i = 0; i < ds.Tables.Count; i++)
                            {
                                AddXmlNods(root, ds.Tables[i].TableName.ToString(), ds.Tables[i]);
                            }

                            doc.Save(xmlfilename);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error in exporting Partprogram");
                            RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("ExportXML:PP02", ex);
                        }
                    }
                    MessageBox.Show("Partprogram Exported Sucessfully");
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP01", ex);
                return false;
            }
        }

        //insert Rows into the table
        private void readRows(DataRow[] rows, ref DataTable mytable)
        {
            try
            {
                int ccount = mytable.Columns.Count;
                int rcount = mytable.Rows.Count;
                for (int i = 0; i < rows.Length; i++)
                {
                    mytable.Rows.Add();
                    for (int j = 0; j < ccount; j++)
                    {
                        mytable.Rows[rcount + i][j] = rows[i][j];
                    }
                }
            }
            catch (Exception ex)
            {
                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("Export Error:PP03", ex);
            }
        }

        private void AddXmlNods(XmlNode Root, string TableName, DataTable dt)
        {
            XmlNode Table = Root.OwnerDocument.CreateElement("Table");
            XmlAttribute attrib;
            attrib = Root.OwnerDocument.CreateAttribute("Name");
            attrib.Value = TableName;
            Table.Attributes.Append(attrib);
            Root.AppendChild(Table);
            for (int j = 0; j < dt.Rows.Count; j++)
            {
                XmlNode Row = Table.OwnerDocument.CreateElement("DataRow");
                Table.AppendChild(Row);
                for (int col = 0; col < dt.Rows[j].ItemArray.Length; col++)
                {
                    XmlNode Collumns = Row.OwnerDocument.CreateElement(dt.Columns[col].ColumnName.ToString());
                    XmlAttribute CollumnDatatype;
                    CollumnDatatype = Row.OwnerDocument.CreateAttribute("DataType");
                    CollumnDatatype.Value = dt.Columns[col].DataType.ToString();
                    Collumns.Attributes.Append(CollumnDatatype);
                    Collumns.InnerText = dt.Rows[j][col].ToString();
                    Row.AppendChild(Collumns);
                }
            }
        }

        //Import Partprogram
        public bool ImportPartProgram()
        {
            string ProgramPath = GlobalSettings.ProgramPath;
            string TemplatePath = GlobalSettings.TemplatePath;
            string ReportPath = GlobalSettings.ReportPath;
            Hashtable RStyleId = new Hashtable();

            System.Windows.Forms.FolderBrowserDialog dlg = new System.Windows.Forms.FolderBrowserDialog();
            dlg.SelectedPath = "";
            dlg.ShowNewFolderButton = true;
            //System.Windows.Forms.DialogResult result = ;
            IntPtr mainWindowPtr = new System.Windows.Interop.WindowInteropHelper(GlobalSettings.MainWin).Handle; // 'this' means WPF Window

            string ProgramNewName; // = dlg.SelectedPath;
            if (dlg.ShowDialog(new OldWindow(mainWindowPtr)) == System.Windows.Forms.DialogResult.OK)
            {
                ProgramNewName = dlg.SelectedPath;
                string[] programList = Directory.GetDirectories(ProgramNewName);
                if (programList.Length == 0)
                    programList = new string[] { ProgramNewName};

                for (int jj = 0; jj < programList.Length; jj++)
                {
                    DataSet XmlDs = new DataSet();
                    DataSet XLDS = new DataSet();

                    string filename = programList[jj].Substring(programList[jj].LastIndexOf(@"\"));
                    string xmlPath = programList[jj] + filename + ".xml";
                    string PPpath = programList[jj] + filename + ".rppx";
                    string _ProgramPreviewImage = programList[jj] + filename + "_ProgramPreviewImage.jpg";
                    string _FirstPointActionImage = programList[jj] + filename + "_FirstPointActionImage.jpg";
                    List<string> _reportPath = new List<string>();
                    List<string> _templatePath = new List<string>();
                    if (System.IO.File.Exists(PPpath))
                    {
                        #region Enter Values in Database
                        if (readXML(xmlPath, ref XmlDs))
                        {
                            try
                            {
                                XLDS = GlobalSettings.LoadExcelInstance.GetDataSet();
                                double Temp_Program_Id = Convert.ToDouble(XLDS.Tables["ProgramInformation"].Rows.Count);
                                double Program_Id = 0;
                                double Report_Style_Id = 0;
                                double Report_Id = 0;
                                double Field_Id = 0;

                                //written by Abi Priyadharsan
                                //Checking for number of program in database
                                //If there is no program than initialize the program Id to zero
                                if (Temp_Program_Id == 0)
                                    Program_Id = 0;
                                //If there is more than one program than initialize the program Id to total number of programs in database plus one
                                else
                                    Program_Id = Convert.ToDouble(XLDS.Tables["ProgramInformation"].Compute("MAX(Program_Id)", String.Empty));


                                for (int j = 0; j < XmlDs.Tables["ProgramInformation"].Rows.Count; j++)
                                {
                                    Program_Id++;
                                    int rowcount = XLDS.Tables["ProgramInformation"].Rows.Count;
                                    XLDS.Tables["ProgramInformation"].Rows.Add();
                                    for (int k = 0; k < XmlDs.Tables["ProgramInformation"].Columns.Count; k++)
                                    {
                                        string collumnName = XmlDs.Tables["ProgramInformation"].Columns[k].ColumnName;
                                        if (collumnName == "Program_Id")
                                        {
                                            XLDS.Tables["ProgramInformation"].Rows[rowcount]["Program_Id"] = Program_Id;
                                        }
                                        else if (collumnName == "Program_Name")
                                        {
                                            XLDS.Tables["ProgramInformation"].Rows[rowcount]["Program_Name"] = ProgramPath + filename + ".rppx";
                                        }
                                        else
                                            XLDS.Tables["ProgramInformation"].Rows[rowcount][collumnName] = XmlDs.Tables["ProgramInformation"].Rows[j][collumnName];
                                    }
                                }
                                if (Temp_Program_Id == 0)
                                    Report_Style_Id = 0;
                                else
                                    Report_Style_Id = Convert.ToDouble(XLDS.Tables["ReportStyleInformation"].Compute("MAX(Report_Style_Id)", String.Empty));

                                for (int j = 0; j < XmlDs.Tables["ReportStyleInformation"].Rows.Count; j++)
                                {
                                    Report_Style_Id++;
                                    int rowcount = XLDS.Tables["ReportStyleInformation"].Rows.Count;
                                    XLDS.Tables["ReportStyleInformation"].Rows.Add();
                                    for (int k = 0; k < XmlDs.Tables["ReportStyleInformation"].Columns.Count; k++)
                                    {
                                        string collumnName = XmlDs.Tables["ReportStyleInformation"].Columns[k].ColumnName;
                                        if (collumnName == "Report_Style_Id")
                                        {
                                            RStyleId.Add(XmlDs.Tables["ReportStyleInformation"].Rows[j][collumnName].ToString(), Report_Style_Id);
                                            XLDS.Tables["ReportStyleInformation"].Rows[rowcount]["Report_Style_Id"] = Report_Style_Id;
                                        }
                                        else if (collumnName == "Program_Id")
                                        {
                                            XLDS.Tables["ReportStyleInformation"].Rows[rowcount]["Program_Id"] = Program_Id;
                                        }
                                        else if (collumnName == "Template_Name")
                                        {
                                            _templatePath.Add(TemplatePath + XmlDs.Tables["ReportStyleInformation"].Rows[j][collumnName].ToString().Substring(XmlDs.Tables["ReportStyleInformation"].Rows[j][collumnName].ToString().LastIndexOf(@"\")));
                                            // XLDS.Tables["ReportStyleInformation"].Rows[rowcount]["Template_Name"] = TemplatePath + @"\" + _templatePath.Substring(_templatePath.LastIndexOf(@"\"));
                                            XLDS.Tables["ReportStyleInformation"].Rows[rowcount]["Template_Name"] = _templatePath[j];
                                        }
                                        else
                                            XLDS.Tables["ReportStyleInformation"].Rows[rowcount][collumnName] = XmlDs.Tables["ReportStyleInformation"].Rows[j][collumnName];
                                    }
                                }
                                if (Temp_Program_Id == 0)
                                    Report_Id = 0;
                                else
                                    Report_Id = Convert.ToDouble(XLDS.Tables["ReportInformation"].Compute("MAX(Report_Id)", String.Empty));

                                for (int j = 0; j < XmlDs.Tables["ReportInformation"].Rows.Count; j++)
                                {
                                    Report_Id++;
                                    int rowcount = XLDS.Tables["ReportInformation"].Rows.Count;
                                    XLDS.Tables["ReportInformation"].Rows.Add();
                                    for (int k = 0; k < XmlDs.Tables["ReportInformation"].Columns.Count; k++)
                                    {
                                        string collumnName = XmlDs.Tables["ReportInformation"].Columns[k].ColumnName;
                                        if (collumnName == "Report_Style_Id")
                                        {
                                            // XLDS.Tables["ReportInformation"].Rows[rowcount]["Report_Style_Id"] = Report_Style_Id;
                                            XLDS.Tables["ReportInformation"].Rows[rowcount]["Report_Style_Id"] = RStyleId[XmlDs.Tables["ReportInformation"].Rows[j][collumnName].ToString()];
                                        }
                                        else if (collumnName == "Report_Id")
                                        {
                                            XLDS.Tables["ReportInformation"].Rows[rowcount]["Report_Id"] = Report_Id;
                                        }
                                        else if (collumnName == "R_ReportName")
                                        {
                                            _reportPath.Add(ReportPath + XmlDs.Tables["ReportInformation"].Rows[j][collumnName].ToString().Substring(XmlDs.Tables["ReportInformation"].Rows[j][collumnName].ToString().LastIndexOf(@"\")));
                                            //XLDS.Tables["ReportInformation"].Rows[rowcount]["R_ReportName"] = ReportPath + @"\" + _reportPath.Substring(_reportPath.LastIndexOf(@"\"));
                                            XLDS.Tables["ReportInformation"].Rows[rowcount]["R_ReportName"] = _reportPath[j];
                                        }
                                        else
                                            XLDS.Tables["ReportInformation"].Rows[rowcount][collumnName] = XmlDs.Tables["ReportInformation"].Rows[j][collumnName];
                                    }
                                }
                                if (Temp_Program_Id == 0)
                                    Field_Id = 0;
                                else
                                    Field_Id = Convert.ToDouble(XLDS.Tables["FieldInformation"].Compute("MAX(Field_Id)", String.Empty));

                                for (int j = 0; j < XmlDs.Tables["FieldInformation"].Rows.Count; j++)
                                {
                                    Field_Id++;
                                    int rowcount = XLDS.Tables["FieldInformation"].Rows.Count;
                                    XLDS.Tables["FieldInformation"].Rows.Add();
                                    for (int k = 0; k < XmlDs.Tables["FieldInformation"].Columns.Count; k++)
                                    {
                                        string collumnName = XmlDs.Tables["FieldInformation"].Columns[k].ColumnName;
                                        if (collumnName == "Report_Style_Id")
                                        {
                                            //XLDS.Tables["FieldInformation"].Rows[rowcount]["Report_Style_Id"] = Report_Style_Id;
                                            XLDS.Tables["FieldInformation"].Rows[rowcount]["Report_Style_Id"] = RStyleId[XmlDs.Tables["FieldInformation"].Rows[j][collumnName].ToString()];
                                        }
                                        else if (collumnName == "Field_Id")
                                        {
                                            XLDS.Tables["FieldInformation"].Rows[rowcount]["Field_Id"] = Field_Id;
                                        }
                                        else
                                            XLDS.Tables["FieldInformation"].Rows[rowcount][collumnName] = XmlDs.Tables["FieldInformation"].Rows[j][collumnName];
                                    }
                                }
                                for (int j = 0; j < XmlDs.Tables["MultiProgramReport"].Rows.Count; j++)
                                {
                                    XLDS.Tables["MultiProgramReport"].Rows.Add();
                                    for (int k = 0; k < XmlDs.Tables["MultiProgramReport"].Columns.Count; k++)
                                    {
                                        string collumnName = XmlDs.Tables["MultiProgramReport"].Columns[k].ColumnName;
                                        if (collumnName == "Report_Id")
                                        {
                                            XLDS.Tables["MultiProgramReport"].Rows[rowcount]["Report_Id"] = Report_Id;
                                        }
                                        else if (collumnName == "Program_Id")
                                        {
                                            XLDS.Tables["MultiProgramReport"].Rows[rowcount]["Program_Id"] = Program_Id;
                                        }
                                        else
                                            XLDS.Tables["MultiProgramReport"].Rows[rowcount][collumnName] = XmlDs.Tables["MultiProgramReport"].Rows[j][collumnName];
                                    }
                                }

                                #region CopyPaste Files
                                if (!System.IO.File.Exists(ProgramPath + filename + ".rppx"))
                                {
                                    System.IO.File.Copy(PPpath, ProgramPath + filename + ".rppx");
                                    if (System.IO.File.Exists(_ProgramPreviewImage))
                                    {
                                        if (System.IO.File.Exists(ProgramPath + "\\" + _ProgramPreviewImage.Substring(_ProgramPreviewImage.LastIndexOf(@"\"))))
                                        {
                                            System.IO.File.Delete(ProgramPath + "\\" + _ProgramPreviewImage.Substring(_ProgramPreviewImage.LastIndexOf(@"\")));
                                        }
                                        System.IO.File.Copy(_ProgramPreviewImage, ProgramPath + "\\" + _ProgramPreviewImage.Substring(_ProgramPreviewImage.LastIndexOf(@"\")));
                                    }
                                    if (System.IO.File.Exists(_FirstPointActionImage))
                                    {
                                        if (System.IO.File.Exists(ProgramPath + "\\" + _FirstPointActionImage.Substring(_FirstPointActionImage.LastIndexOf(@"\"))))
                                        {
                                            System.IO.File.Delete(ProgramPath + "\\" + _FirstPointActionImage.Substring(_FirstPointActionImage.LastIndexOf(@"\")));
                                        }
                                        System.IO.File.Copy(_FirstPointActionImage, ProgramPath + "\\" + _FirstPointActionImage.Substring(_FirstPointActionImage.LastIndexOf(@"\")));
                                    }
                                    foreach (string str in _reportPath)
                                    {
                                        try
                                        {
                                            if (System.IO.File.Exists(programList[jj] + str.Substring(str.LastIndexOf(@"\"))))
                                            {
                                                if (System.IO.File.Exists(str))
                                                {
                                                    System.IO.File.Delete(str);
                                                }
                                                //System.IO.File.Copy(_reportPath, ReportPath + "\\" + _reportPath.Substring(_reportPath.LastIndexOf(@"\")));
                                                System.IO.File.Copy(programList[jj] + str.Substring(str.LastIndexOf(@"\")), str);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("ImportPP:PPFileCopy01", ex);
                                        }
                                    }
                                    foreach (string str in _templatePath)
                                    {
                                        if (System.IO.File.Exists(programList[jj] + str.Substring(str.LastIndexOf(@"\"))))
                                        {
                                            try
                                            {
                                                if (System.IO.File.Exists(str))
                                                {
                                                    System.IO.File.Delete(str);
                                                }
                                                System.IO.File.Copy(programList[jj] + str.Substring(str.LastIndexOf(@"\")), str);
                                            }
                                            catch (Exception ex)
                                            {
                                                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("ImportPP:PPFileCopy02", ex);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //MessageBox.Show("PartPogram with same name already exist , either delete or rename the existing Partprogram");
                                    //return false;
                                }
                                string ConnectionString;
                                if (System.Environment.Is64BitOperatingSystem)
                                    ConnectionString = " Provider=Microsoft.Ace.OLEDB.12.0;Data Source=" + System.Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + @"\Rapid-I 5.0\Database\ExcelDoc.mdb;Persist Security Info=False;Jet OLEDB:Database Password=excelforctpl";
                                else
                                    ConnectionString = " Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + System.Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + @"\Rapid-I 5.0\Database\ExcelDoc.mdb;Persist Security Info=False;Jet OLEDB:Database Password=excelforctpl";

                                for (int i = 0; i < XLDS.Tables.Count; i++)
                                {
                                    System.Data.OleDb.OleDbDataAdapter DataA = new System.Data.OleDb.OleDbDataAdapter("SELECT * FROM " + "[" + XLDS.Tables[i].TableName + "]", ConnectionString);
                                    System.Data.OleDb.OleDbCommandBuilder CommB = new System.Data.OleDb.OleDbCommandBuilder(DataA);
                                    try
                                    {
                                        DataA.Update(XLDS.Tables[i]);
                                    }
                                    catch (Exception ex)
                                    {
                                        RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("ImportPP Update Database:PP01", ex);
                                        //return false;
                                    }
                                }
                                #endregion

                            }
                            catch (Exception ex)
                            {
                                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("ImportPP Database:PPLast", ex);
                                //return false;
                            }
                        }
                        #endregion

                    }
                }
                return true;
            }
            return false;
        }
        //Read the Xml File
        private bool readXML(string Filepath, ref DataSet XmlDs)
        {
            bool correctXml = false;
            try
            {
                tablecount = 0; rowcount = 0;
                {
                    XmlTextReader reader = new XmlTextReader(Filepath);
                    reader.WhitespaceHandling = WhitespaceHandling.None;
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.Load(reader);
                    reader.Close();
                    XmlNode xnod = xmlDoc.DocumentElement;
                    if (xnod.Name == "Partprogram")
                    {
                        AddXMLTablesToDs(ref XmlDs, xnod, 1);
                        correctXml = true;
                    }
                    else
                    {
                        MessageBox.Show("Your XML was probably bad...");
                        correctXml = false;
                    }
                }
            }
            catch (XmlException ex)
            {
                RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP30", ex);
                MessageBox.Show("Your XML was probably bad...");
                correctXml = false;
            }
            return correctXml;
        }
        //Transform Xml tables to System.data.dataset Tables
        private void AddXMLTablesToDs(ref DataSet XmlDs, XmlNode xnod, Int32 intLevel)
        {
            XmlNode xnodWorking;
            if (intLevel == 5)
            {
                if (XmlDs.Tables[tablecount - 1].Rows.Count < rowcount)
                    XmlDs.Tables[tablecount - 1].Rows.Add();
                XmlDs.Tables[tablecount - 1].Rows[rowcount - 1][xnod.ParentNode.Name] = xnod.Value;
            }
            if (xnod.NodeType == XmlNodeType.Element)
            {
                XmlNamedNodeMap mapAttributes = xnod.Attributes;
                if (xnod.Name == "DataRow")
                {
                    rowcount++;
                }
                foreach (XmlNode xnodAttribute in mapAttributes)
                {
                    if (xnod.Name == "Table")
                    {
                        DataTable dt = new DataTable(xnodAttribute.Value);
                        XmlDs.Tables.Add(dt);
                        tablecount++;
                        rowcount = 0;
                    }
                    else if (intLevel == 4)
                    {
                        if (rowcount == 1)
                        {
                            XmlDs.Tables[tablecount - 1].Columns.Add(xnod.Name, Type.GetType(xnodAttribute.Value));
                        }
                    }
                }
                if (xnod.HasChildNodes)
                {
                    xnodWorking = xnod.FirstChild;
                    while (xnodWorking != null)
                    {
                        AddXMLTablesToDs(ref XmlDs, xnodWorking, intLevel + 1);
                        xnodWorking = xnodWorking.NextSibling;
                    }
                }
            }
        }
        //get list of all reportName..
        private void GetAllReportName(ref System.Collections.ArrayList reportNameList, ref System.Collections.ArrayList templateNameList)
        {
            try
            {
                System.Data.DataRow dr = ((System.Data.DataRowView)dgvPrograms.SelectedItem).Row;
                System.Collections.ArrayList ReportStyles = GlobalSettings.LoadExcelInstance.GetAllreportStyles((int)dr["Program_Id"]); // GlobalSettings.PartProgramPaths[dgvPrograms.SelectedIndex] + dr[0].ToString());
                //lstReportStyles.Items.Clear();
                for (int j = 0; j < ReportStyles.Count; j++)
                {
                    templateNameList.Add(GlobalSettings.TemplatePath + "\\" + ReportStyles[j].ToString() + "_Template.xls");
                    System.Collections.ArrayList Reports = GlobalSettings.LoadExcelInstance.GetAllReportNames(ReportStyles[j].ToString());
                    //lstReports.Items.Clear();
                    for (int l = 0; l < Reports.Count; l++)
                        reportNameList.Add(Reports[l].ToString());
                }
            }
            catch (Exception ex)
            { RWrapper.RW_MainInterface.MYINSTANCE().WriteErrorLog("FrontEndError:PP10", ex); }
        }

        //private void lstReports_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    if (lstReports.SelectedIndex >= 0)
        //    {
        //        GlobalSettings.MainExcelInstance.ReportName = lstReports.SelectedItem.ToString();
        //        GlobalSettings.MainExcelInstance.ReportData(this.lstReportStyles.SelectedIndex);
        //    }
        //}
    }
}
